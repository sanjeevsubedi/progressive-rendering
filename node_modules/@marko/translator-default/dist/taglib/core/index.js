"use strict";exports.__esModule = true;exports.default = void 0;var parseImport = _interopRequireWildcard(require("./parse-import"));
var parseExport = _interopRequireWildcard(require("./parse-export"));
var parseClass = _interopRequireWildcard(require("./parse-class"));
var parseStatic = _interopRequireWildcard(require("./parse-static"));
var parseStyle = _interopRequireWildcard(require("./parse-style"));
var transformStyle = _interopRequireWildcard(require("./transform-style"));
var parseMacro = _interopRequireWildcard(require("./macro/parse"));
var translateMacro = _interopRequireWildcard(require("./macro/translate"));
var translateIncludeContent = _interopRequireWildcard(require("./translate-include-content"));
var translateIf = _interopRequireWildcard(require("./conditional/translate-if"));
var translateElseIf = _interopRequireWildcard(require("./conditional/translate-else-if"));
var translateElse = _interopRequireWildcard(require("./conditional/translate-else"));
var translateFor = _interopRequireWildcard(require("./translate-for"));
var translateWhile = _interopRequireWildcard(require("./translate-while"));
var translateHTMLComment = _interopRequireWildcard(require("./translate-html-comment"));
var translateServerOnly = _interopRequireWildcard(require("./translate-server-only"));
var translateBody = _interopRequireWildcard(require("./translate-body"));
var translateAwait = _interopRequireWildcard(require("./translate-await"));
var parseModuleCode = _interopRequireWildcard(require("./parse-module-code"));function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function (nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}var _default =

{
  "taglib-id": "marko-default-core",
  "<import>": {
    "node-factory": parseImport,
    "parse-options": {
      statement: true,
      rawOpenTag: true },

    autocomplete: [
    {
      displayText: 'import <scope> from "<path>"',
      description:
      "Use to import external modules, follows the same syntax as JavaScript imports.",
      snippet: 'import ${2} from "${1:path}"',
      descriptionMoreURL:
      "https://markojs.com/docs/syntax/#importing-external-files" }] },



  "<export>": {
    "node-factory": parseExport,
    "parse-options": {
      statement: true,
      rawOpenTag: true },

    autocomplete: [
    {
      displayText: "export <scope>",
      description:
      "Use export additional data with the template, follows the same syntax as JavaScript exports.",
      snippet: "export ${1}",
      descriptionMoreURL:
      "https://markojs.com/docs/syntax/#importing-external-files" }] },



  "<class>": {
    "node-factory": parseClass,
    "parse-options": {
      statement: true,
      rawOpenTag: true },

    autocomplete: [
    {
      displayText: "class { /** lifecycle methods **/ }",
      snippet: "class {\n\t$0\n}",
      description:
      "A class containing the lifecycle methods, event handlers, and other properties for this component.",
      descriptionMoreURL:
      "https://markojs.com/docs/class-components/#single-file-components" }] },



  "<static>": {
    "node-factory": parseStatic,
    "parse-options": {
      statement: true,
      rawOpenTag: true },

    autocomplete: [
    {
      displayText: "static <statement>",
      description:
      "A JavaScript statement which is only evaluated once your template is loaded.",
      descriptionMoreURL: "https://markojs.com/docs/syntax/#static-javascript" }] },



  "<style>": {
    "node-factory": parseStyle,
    transformer: transformStyle,
    "parse-options": {
      rawOpenTag: true } },


  "<macro>": {
    "node-factory": parseMacro,
    "code-generator": translateMacro,
    "@name": {
      type: "string",
      autocomplete: [
      {
        description: "The name which can be used as a tag within a template." }] },



    autocomplete: [
    {
      displayText: 'macro|<params>| name="<name>"',
      description: "Creates a reusable fragment within the template.",
      snippet: 'macro|${2:param1, param2}| name="${1:name}"',
      descriptionMoreURL: "https://markojs.com/docs/core-tags/#macro" }] },



  "<include-text>": {
    "code-generator": translateIncludeContent,
    attributes: {},
    autocomplete: [
    {
      displayText: 'include-text("<path>")',
      description: "Allows you to inline the contents of a text file.",
      snippet: 'include-text(${1:"./foo.txt"})',
      descriptionMoreURL: "https://markojs.com/docs/core-tags/#include-text" }] },



  "<include-html>": {
    "code-generator": translateIncludeContent,
    attributes: {},
    autocomplete: [
    {
      displayText: 'include-html("<path>")',
      snippet: 'include-html(${1:"./foo.html"})',
      description: "Allows you to inline the contents of an html file.",
      descriptionMoreURL: "https://markojs.com/docs/core-tags/#include-html" }] },



  "<if>": {
    "code-generator": translateIf,
    attributes: {},
    autocomplete: [
    {
      snippet: "if(${1:condition})",
      description: "Use to display content only if the condition is meant.",
      descriptionMoreURL:
      "https://markojs.com/docs/core-tags/#if-else-if-else" }] },



  "<else-if>": {
    "code-generator": translateElseIf,
    attributes: {},
    autocomplete: [
    {
      snippet: "else-if(${1:condition})",
      description:
      "Use after an <if> or <else-if> tag to display content if those conditions do not match and this one does.",
      descriptionMoreURL:
      "https://markojs.com/docs/core-tags/#if-else-if-else" }] },



  "<else>": {
    "code-generator": translateElse,
    attributes: {},
    autocomplete: [
    {
      description:
      "Use after an <if> or <else-if> tag to display content if those conditions do not match.",
      descriptionMoreURL:
      "https://markojs.com/docs/core-tags/#if-else-if-else" }] },



  "<for>": {
    "code-generator": translateFor,
    "@of": {
      type: "expression",
      autocomplete: [
      {
        description: "Iterates over a list of items." }] },



    "@in": {
      type: "expression",
      autocomplete: [
      {
        description: "Iterates over the keys and values of an object." }] },



    "@to": {
      type: "number",
      autocomplete: [
      {
        description: "Iterates up to the provided number (inclusive)" }] },



    "@from": {
      type: "number",
      autocomplete: [
      {
        description: "Iterates starting from the provided number (inclusive)" }] },



    "@step": {
      type: "number",
      autocomplete: [
      {
        description:
        "The amount to increment during each interation (with from/to)" }] },



    autocomplete: [
    {
      snippet: "for|${1:value, index}| of=${3:array}",
      description:
      "Use to iterate over lists, object properties, or between ranges.",
      descriptionMoreURL:
      "https://markojs.com/docs/core-tags/#iterating-over-a-list" },

    {
      snippet: "for|${1:name, value}| in=${3:object}",
      descriptionMoreURL:
      "https://markojs.com/docs/core-tags/#iterating-over-an-objects-properties" },

    {
      snippet:
      "for|${1:index}| from=${2:number} to=${3:number} step=${4:number}",
      descriptionMoreURL:
      "https://markojs.com/docs/core-tags/#iterating-between-a-range-of-numbers" }] },



  "<while>": {
    "code-generator": translateWhile,
    autocomplete: [
    {
      snippet: "while(${1:condition})",
      description:
      "Renders the content multiple times until the condition is no longer met.",
      descriptionMoreURL: "https://markojs.com/docs/core-tags/#while" }] },



  "<html-comment>": {
    "code-generator": translateHTMLComment,
    "parse-options": {
      text: true },

    attributes: {},
    autocomplete: [
    {
      description:
      "Use to create an html comment that is not stripped from the output.",
      descriptionMoreURL: "https://markojs.com/docs/core-tags/#html-comment" }] },



  "<_preserve>": {
    renderer: "marko/src/core-tags/components/preserve-tag",
    "@n": "boolean",
    "@i": "boolean",
    "@b": "boolean",
    autocomplete: [] },

  "<init-components>": {
    "code-generator": translateServerOnly,
    renderer: "marko/src/core-tags/components/init-components-tag.js",
    "@immediate": "boolean" },

  "<_preferred-script-location>": {
    "code-generator": translateServerOnly,
    renderer: "marko/src/core-tags/components/preferred-script-location-tag.js" },

  "<body>": {
    "code-generator": translateBody },

  "<await>": {
    renderer: "marko/src/core-tags/core/await/renderer.js",
    "code-generator": translateAwait,
    "@_provider": "expression",
    "@_name": "string",
    "@name": {
      type: "string",
      autocomplete: [
      {
        description:
        "Used to improve debugging and also to ensure promise ordering with the show-after attribute.",
        snippet: 'name="${1:name}"' }] },



    "@timeout": {
      type: "number",
      autocomplete: [
      {
        description:
        "An optional timeout that when reached will cause the promise to reject with a TimeoutError." }] },



    "@client-reorder": {
      type: "boolean",
      autocomplete: [
      {
        description:
        "If set anything after this promise will be sent out immediately, and reordered using JS in the browser." }] },



    "@show-after": {
      type: "string",
      autocomplete: [
      {
        description:
        "This attribute will ensure that (with client-reorder) this await tag will always show after another await tag with the provided name." }] },



    "<then>": {
      autocomplete: [
      {
        displayText: "then|<result>|",
        description: "Executed with the result of the resolved promise.",
        snippet: "then|${1:result}|",
        descriptionMoreURL: "https://markojs.com/docs/core-tags/#await" }] },



    "<catch>": {
      autocomplete: [
      {
        displayText: "catch|<err>|",
        description: "Executed with the err of the rejected promise.",
        snippet: "catch|${1:err}|",
        descriptionMoreURL: "https://markojs.com/docs/core-tags/#await" }] },



    "<placeholder>": {
      autocomplete: [
      {
        description: "A placeholder to display while the promise is pending.",
        descriptionMoreURL: "https://markojs.com/docs/core-tags/#await" }] },



    autocomplete: [
    {
      displayText: "await(<promise>)",
      description:
      "Used to render a template asynchronously with the results of a Promise",
      snippet: "await(${1:promise})",
      descriptionMoreURL: "https://markojs.com/docs/core-tags/#await" }] },



  "<await-reorderer>": {
    "code-generator": translateServerOnly,
    renderer: "marko/src/core-tags/core/await/reorderer-renderer.js",
    autocomplete: [
    {
      snippet: "await-reorderer",
      descriptionMoreURL:
      "http://markojs.com/docs/marko/async-taglib/#<code>&ltawait-reorderer><code>" }] },



  "<__flush_here_and_after__>": {
    "code-generator": translateServerOnly,
    renderer: "marko/src/core-tags/core/__flush_here_and_after__.js" },

  "<module-code>": {
    "node-factory": parseModuleCode,
    "parse-options": {
      rawOpenTag: true } },


  "<*>": {
    "@key": {
      type: "string",
      "preserve-name": true,
      autocomplete: [
      {
        displayText: 'key="<method>"',
        snippet: 'key="${1:method}"',
        descriptionMoreURL:
        "http://markojs.com/docs/marko-components/get-started/#referencing-nested-components" },

      {
        descriptionMoreURL:
        "http://markojs.com/docs/marko-components/get-started/#referencing-nested-components" }] },



    "@on*": {
      pattern: true,
      type: "statement",
      "allow-expressions": true,
      "preserve-name": true,
      "set-flag": "hasComponentEvents",
      autocomplete: [
      {
        displayText: 'on<event>("<method>")',
        snippet: 'on${1:Click}("handle${2:Button}${1:Click}")',
        descriptionMoreURL:
        "https://markojs.com/docs/components/#attaching-dom-event-listeners" }] },



    "@once*": {
      pattern: true,
      type: "statement",
      "allow-expressions": true,
      "preserve-name": true,
      "set-flag": "hasComponentEvents",
      autocomplete: {
        displayText: 'once<event>("<method>")',
        snippet: 'once${1:Click}("handle${2:Button}${1:Click}")',
        descriptionMoreURL:
        "https://markojs.com/docs/components/#attaching-dom-event-listeners" } },


    "@no-update": {
      type: "flag",
      "preserve-name": true,
      autocomplete: [
      {
        descriptionMoreURL:
        "http://markojs.com/docs/marko-components/#preserving-dom-nodes-during-re-render" }] },



    "@no-update-body": {
      type: "flag",
      "preserve-name": true,
      autocomplete: [
      {
        descriptionMoreURL:
        "http://markojs.com/docs/marko-components/#preserving-dom-nodes-during-re-render" }] },



    "@no-update-if": {
      "preserve-name": true,
      autocomplete: [
      {
        snippet: "no-update-if(${1:condition})",
        descriptionMoreURL:
        "http://markojs.com/docs/marko-components/#preserving-dom-nodes-during-re-render" }] },



    "@no-update-body-if": {
      "preserve-name": true,
      autocomplete: [
      {
        snippet: "no-update-body-if(${1:condition})",
        descriptionMoreURL:
        "http://markojs.com/docs/marko-components/#preserving-dom-nodes-during-re-render" }] } } };exports.default = _default;