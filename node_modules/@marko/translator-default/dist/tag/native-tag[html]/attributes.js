"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.default = _default;var _compiler = require("@marko/compiler");
var _babelUtils = require("@marko/babel-utils");
var _attr = _interopRequireDefault(require("marko/src/runtime/html/helpers/attr"));
var _util = require("../util");

function _default(path, attrs) {
  if (!attrs.length) return _compiler.types.stringLiteral("");

  const len = attrs.length;
  if (len === 0) return _compiler.types.stringLiteral("");

  if (attrs.some((attr) => !attr.node.name)) {
    const attrsObject = _compiler.types.objectExpression([]);
    for (let i = 0; i < len; i++) {
      const {
        node: { name, value } } =
      attrs[i];

      if (name) {
        attrsObject.properties.push(
        _compiler.types.objectProperty(_compiler.types.stringLiteral(name), value));

      } else {
        mergeSpread(attrsObject.properties, value);
      }
    }

    return _compiler.types.callExpression(
    (0, _babelUtils.importDefault)(
    path.hub.file,
    "marko/src/runtime/html/helpers/attrs.js",
    "marko_attrs"),

    [
    attrsObject.properties.length === 1 &&
    _compiler.types.isSpreadElement(attrsObject.properties[0]) ?
    attrsObject.properties[0].argument :
    attrsObject]);


  } else {
    const file = path.hub.file;
    const quasis = [];
    const expressions = [];
    const attrValues = new Map();
    let curString = "";

    // Remove duplicate attrs so last one wins.
    for (let i = len; i--;) {
      const attr = attrs[i];
      const { name, value } = attr.node;
      if (attrValues.has(name)) continue;
      const { confident, computed } = (0, _util.evaluateAttr)(attr);
      attrValues.set(name, {
        confident,
        computed,
        value });

    }

    for (const [name, { confident, computed, value }] of [
    ...attrValues].
    reverse()) {
      if (confident) {
        if (computed == null || computed === false) {
          continue;
        }

        curString += (0, _attr.default)(name, computed);
      } else {
        quasis.push(curString);
        curString = "";
        expressions.push(
        _compiler.types.callExpression(
        (0, _babelUtils.importDefault)(
        file,
        "marko/src/runtime/html/helpers/attr.js",
        "marko_attr"),

        [_compiler.types.stringLiteral(name), value]));


      }
    }

    quasis.push(curString);

    if (expressions.length) {
      return (0, _babelUtils.normalizeTemplateString)(quasis, ...expressions);
    } else {
      return _compiler.types.stringLiteral(quasis.join(""));
    }
  }
}

function mergeSpread(properties, value) {
  if (_compiler.types.isObjectExpression(value)) {
    for (const prop of value.properties) {
      if (_compiler.types.isSpreadElement(prop)) {
        mergeSpread(properties, prop.argument);
      } else {
        properties.push(prop);
      }
    }
  } else {
    properties.push(_compiler.types.spreadElement(value));
  }
}