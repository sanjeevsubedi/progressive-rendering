"use strict";


class ServerComponent {
  constructor(id, input, out, typeName, customEvents, scope) {
    this.id = id;
    this.P_ = customEvents;
    this.H_ = scope;
    this.typeName = typeName;
    this.O_ = undefined; // Used to keep track of bubbling DOM events for components rendered on the server
    this._X_ = 0;

    this.onCreate(input, out);
    this._Y_ = this.onInput(input, out) || input;
    if (this.R_ === undefined) {
      this.R_ = this._Y_;
    }
    this.onRender(out);
  }

  set input(newInput) {
    this.R_ = newInput;
  }

  get input() {
    return this.R_;
  }

  set state(newState) {
    this.K_ = newState;
  }

  get state() {
    return this.K_;
  }

  get _u_() {
    return this.K_;
  }

  elId(nestedId) {
    var id = this.id;

    if (nestedId == null) {
      return id;
    } else {
      if (typeof nestedId !== "string") {
        // eslint-disable-next-line no-constant-condition




        nestedId = String(nestedId);
      }

      if (nestedId.indexOf("#") === 0) {
        id = "#" + id;
        nestedId = nestedId.substring(1);
      }

      return id + "-" + nestedId;
    }
  }

  onCreate() {}
  onInput() {}
  onRender() {}}


ServerComponent.prototype.getElId = ServerComponent.prototype.elId;

module.exports = ServerComponent;