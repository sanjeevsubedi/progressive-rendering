"use strict"; /* jshint newcap:false */
function VNode() {}

VNode.prototype = {
  bA_: function (finalChildCount, ownerComponent) {
    this.bQ_ = finalChildCount;
    this.bR_ = 0;
    this.bG_ = null;
    this.bS_ = null;
    this.bD_ = null;
    this.bE_ = null;
    this.aC_ = ownerComponent;
  },

  get _s_() {
    var firstChild = this.bG_;

    if (firstChild && firstChild.bF_) {
      var nestedFirstChild = firstChild._s_;
      // The first child is a DocumentFragment node.
      // If the DocumentFragment node has a first child then we will return that.
      // Otherwise, the DocumentFragment node is not *really* the first child and
      // we need to skip to its next sibling
      return nestedFirstChild || firstChild.bT_;
    }

    return firstChild;
  },

  get bT_() {
    var nextSibling = this.bE_;

    if (nextSibling) {
      if (nextSibling.bF_) {
        var firstChild = nextSibling._s_;
        return firstChild || nextSibling.bT_;
      }
    } else {
      var parentNode = this.bD_;
      if (parentNode && parentNode.bF_) {
        return parentNode.bT_;
      }
    }

    return nextSibling;
  },

  bs_: function (child) {
    this.bR_++;

    if (this.bI_ === "textarea") {
      if (child.bU_) {
        var childValue = child.bV_;
        this.bJ_ = (this.bJ_ || "") + childValue;
      } else if (child.n_ || child.m_) {
        this.bW_ = true;
      } else {
        throw TypeError();
      }
    } else {
      var lastChild = this.bS_;

      child.bD_ = this;

      if (lastChild) {
        lastChild.bE_ = child;
      } else {
        this.bG_ = child;
      }

      this.bS_ = child;
    }

    return child;
  },

  bL_: function finishChild() {
    if (this.bR_ === this.bQ_ && this.bD_) {
      return this.bD_.bL_();
    } else {
      return this;
    }
  }

  // ,toJSON: function() {
  //     var clone = Object.assign({
  //         nodeType: this.nodeType
  //     }, this);
  //
  //     for (var k in clone) {
  //         if (k.startsWith('_')) {
  //             delete clone[k];
  //         }
  //     }
  //     delete clone._nextSibling;
  //     delete clone._lastChild;
  //     delete clone.parentNode;
  //     return clone;
  // }
};

module.exports = VNode;